
function git() {
  hub "$@"
}

function churn() {
  git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count\tfile"} {print $1 "\t" $2}' | sort -g
}

function remove-ext() {
  echo "$1" | sed "s/\([^.*]\)\.\(.*\)*$/\1/g"
}

function search() {
  find . -type f \( ! -path "*/.git/*" \) -exec grep -l "$1" {} \;
}

function searchf() {
  find . -type f -name "*$1*" \( ! -path "*/.git/*" \)
}

function searchd() {
  find . -type d -name "*$1*" \( ! -path "*/.git/*" \)
}

function searchp() {
  find . -type f \( ! -path "*/.git/*" ! -iname "*.dex" ! -iname "*.class" ! -iname "*.jar" \) -exec ack -H --nobinary "$1" {} \;
}

function his() {
  history | ack $@
}

function tab2csv() {
  tr '\t' ',' < $1 > $2
}

function csv2tab() {
  tr ',' '\t' < $1 > $2
}

function bman {
  man "${1}" | man2html | browser
}

function prettyjson() {
  pbpaste | jsonlint | node $DEV_PATH/ii/bin/ii.js | less -R
}

function pjson() {
  jsonlint | node $DEV_PATH/ii/bin/ii.js | less -R
}

function gstats() {
  git log --format='%aN' | sort -u |
  while read line ; do
    printf "%-20s" $line;
    git log --author=$line --pretty=tformat: --numstat | awk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf " \033[36m+%-8s\033[m\033[31m -%-8s\033[m = \033[32m%-8s\033[m\n",add,subs,loc }' - \
  ; done
}

# Usage: atosym appname 0x000ac2d4
function atosym() {
  atos -arch armv7 -o "$1.app"/"$1" $2
}


function genant() {
  android update project -p . -n $1
  #/opt/android-sdk/tools/android update lib-project -p dependencies/GreenDroid --target 1
  #patch -i ../AI.build.xml.patch
  mkdir -p ./libs
  mv ./lib/* ./libs/
}

function genantlib() {
  android update lib-project -p dependencies/$1 --target 1
  mkdir -p ./libs
  mv ./lib/* ./libs/
}

function ademu() {
  emulator -avd AVD_Level_8_Google -no-boot-anim -scale 1 -show-kernel
}

function adshell() {
  adb -s emulator-5554 shell
}

function adlog() {
  adb logcat $@
}

function adlogw() {
  adb logcat "*:W" $@
}

function adloge() {
  adb logcat "*:E" $@
}

function adlogf() {
  adb logcat "*:F" $@
}

function geminfo() {
  gem query -r -d -n \^$1$
}

function xmake() {
  find `pwd` -iname "*.xcodeproj" -exec xcodebuild -project "{}" $@ \;
}

function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}

function zipr() {
  zip -r $1.zip $1
}

function serve {
  port="${1:-3000}"
  ruby -r webrick -e "s = WEBrick::HTTPServer.new(:Port => $port, :DocumentRoot => Dir.pwd); trap('INT') { s.shutdown }; s.start"
}

function unlocal {
  username=`whoami`
  export PATH=`echo $PATH | sed -e "s/\/Users\/\$username\/local\/bin://"`
}

function addlocal {
  unlocal
  username=`whoami`
  export PATH="/Users/$username/local/bin:$PATH"
}

function prepend-path {
  remove-path $1
  export PATH=$1:$PATH
}

function append-path {
  remove-path $1
  export PATH=$PATH:$1
}

# clean up the $PATH and remove the specified path
function remove-path {
  cleanpath=$(echo $PATH |
              tr ':' '\n' |
              awk '{a[$0]++;if (a[$0]==1){b[max+1]=$0;max++}}END{for (x = 1; x <= max; x++) { print b[x] } }' |
              grep -v $1 |
              tr '\n' ':' |
              sed -e 's/:$//')

  export PATH=$cleanpath
}


function unlocalruby {
  username=`whoami`
  export PATH=`echo $PATH | sed -e "s/\/Users\/\$username\/local\/ruby\/bin://"`
}

function localruby {
  unlocalruby
  username=`whoami`
  export PATH="/Users/$username/local/ruby/bin:$PATH"
}

function createtags {
  ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f ~/.tags/$1 $2
}



# GIS-related functions

function tospatialite() {
  ogr2ogr -f SQLite `remove-ext $1`.sqlite $1 -dsco SPATIALITE=YES
}

function togeojson() {
  ogr2ogr -f GeoJSON `remove-ext $1`.json $1
}

function toshp() {
  ogr2ogr -f "ESRI Shapefile" `remove-ext $1`.shp $1
}

function topostgis() {
  ogr2ogr -skipfailures -f "PostgreSQL" PG:"dbname='$2' host='localhost' port='5432'" $1 $3
}

function topostgis2() {
  ogr2ogr -skipfailures -nln $3 -f "PostgreSQL" PG:"dbname='$2' host='localhost' port='5432'" $1 $4
}

function topostgis3() {
  ogr2ogr -skipfailures -nln $3 -t_srs "EPSG:4326" -f "PostgreSQL" PG:"dbname='$2' host='localhost' port='5432'" $1 $4
}

function topostgisdbg() {
  ogr2ogr --debug on -f "PostgreSQL" PG:"dbname='$2' host='localhost' port='5432'" $1 $3
}

function projectshp() {
  ogr2ogr -skipfailures -f "ESRI Shapefile" -t_srs "$4" -s_srs "$3" $2 $1
}

function creategisdbt() {
  createdb -T template_postgis $1
}

function createnewdb() {
  createdb $1
  createlang plpgsql $1
}

function creategisdb() {
  createdb $1
  createlang plpgsql $1
  psql -d $1 -f /usr/local/share/postgis/postgis.sql
  psql -d $1 -f /usr/local/share/postgis/spatial_ref_sys.sql
  psql -d $1 -f $DROPBOX_PATH/stuff/postgis/postgis_comments.sql
}

function creategisdb2() {
  createdb $1
  createlang plpgsql $1
  psql -d $1 -f $HOME/local/share/postgresql/contrib/postgis-2.0/postgis.sql
  psql -d $1 -f $HOME/local/share/postgresql/contrib/postgis-2.0/spatial_ref_sys.sql
  psql -d $1 -f $HOME/local/share/postgresql/extension/hstore--1.0.sql
}

function imposmimportdb() {
  creategisdb $2
  imposm --read --write --optimize --overwrite-cache -d $2 $1
  imposm -d $2 --deploy-production-tables
  growlnotify -t "Imposm import" -m "Imposm import finished."
}

function imposmimport() {
  imposm --read --write --optimize --overwrite-cache -d osm $1
  imposm -d osm --deploy-production-tables
}

function osm2sql() {
  osm2pgsql --database=$2 $1
}

function extractosm() {
  # extractosm england.osm.bz2 /Users/zacmcc/data/london.osm.bz2 51.984 -1.115 50.941 0.895
  bunzip2 -c $1 | ~/local/osmosis-*/bin/osmosis --rx file=- --bb top=$3 left=$4 bottom=$5 right=$6 --wx file=$2
  growlnotify -t "Osmosis" -m "Osmosis extract finished."
}

function backupdb() {
  pg_dump $1 | gzip > ~/Documents/postgres_backups/$1.gz
}

function restoredb() {
  gunzip -c $1 | psql $2
}

# getlayers filename | xargs -I {} ogr2ogr -f "GeoJSON" output/'{}'.json filename '{}'
function getlayers() {
  ogrinfo $@ | tail +3 | sed 's/[0-9]*: //' | sed 's/ (.*//'
}

function sayloud() {
  MAXVOLUME=7 && CURVOLUME=$(echo "($(osascript -e 'set curVolume to output volume of (get volume settings)') / 100.0) * $MAXVOLUME" | bc -l)
  osascript -e "set volume $MAXVOLUME" && say "$@" && osascript -e "set volume $CURVOLUME"
}

function ai-rs() {
  export RUBY_HEAP_MIN_SLOTS=1000000
  export RUBY_HEAP_SLOTS_INCREMENT=500000
  export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
  export RUBY_GC_MALLOC_LIMIT=50000000
  rs
}

function pdbackup() {
  rm $@ && mplayer -msglevel all=-1 "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/finder/empty trash.aif"
}
